
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/wcd-luxury-assistant/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  clients       Client[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id             String     @id @default(cuid())
  name           String
  address        String?
  phone          String?
  email          String?
  referralSource String?
  loyaltyReward  String?
  followUpDate   DateTime?
  reminders      String?
  notes          String?    @db.Text
  driveLink      String?
  userId         String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents      Document[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([name])
  @@index([email])
}

model Document {
  id          String     @id @default(cuid())
  docNumber   Int        @unique
  docType     DocType
  clientId    String
  client      Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  jobType     JobType
  services    String     @db.Text
  total       Decimal    @db.Decimal(10, 2)
  status      DocStatus  @default(DRAFT)
  date        DateTime   @default(now())
  driveLink   String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lineItems   LineItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([docNumber])
  @@index([docType])
  @@index([status])
}

model LineItem {
  id          String   @id @default(cuid())
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  description String
  quantity    Int      @default(1)
  rate        Decimal  @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
}

model DocumentCounter {
  id      String @id @default("counter")
  current Int    @default(1986)
}

enum DocType {
  QUOTE
  INVOICE
  PROPOSAL
  RFP
}

enum JobType {
  CAR
  FLEET
  BOAT
  COMMERCIAL
  RESIDENTIAL
  PRESSURE_WASHING
  OTHER
}

enum DocStatus {
  DRAFT
  SENT
  APPROVED
  DECLINED
  PAID
  OVERDUE
}
